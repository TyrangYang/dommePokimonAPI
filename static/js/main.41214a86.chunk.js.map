{"version":3,"sources":["components/logo.png","components/Header.js","components/PokemonList.js","components/PokemonDetail.js","components/BerryList.js","components/BerryDetail.js","components/MachineList.js","components/MachineDetail.js","components/ErrorPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","style","headerStyle","src","logo","className","alt","to","onClick","this","props","pokemonClick","berryClick","machinesClick","Component","background","color","textAlign","padding","PokemonList","pageChanged","number","getDatas","setState","redirectPage","renderRedirect","state","lastPageNum","Number","parseInt","match","params","page","checkVaild","isNaN","pokemonData","prePage","nextPage","pageNum","loading","axios","get","i","res","data","previous","next","numOfAllData","count","results","hasOwnProperty","onePokemon","temp","url","split","id","console","log","body","li","map","key","name","active","items","push","Pagination","Prev","bind","Item","Next","justifyContent","PokemonDetail","errorRedirect","onePokemonData","img","sprites","front_default","noImage","width","height","abilities","species","ability","BerryList","berryData","navbarClicked","chick","oneBerry","BerryDetail","oneBerryData","firmness","flavors","max_harvest","size","smoothness","flavor","MachineList","machineData","oneMachine","MachineDetail","oneMachineData","item","move","version_group","ErrorPage","errorStyle","fontSize","App","pokemonClickSwitch","berryClickSwitch","machineClickSwitch","exact","path","render","component","from","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41214a86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.20bef8cf.png\";","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport { Link } from \"react-router-dom\";\n// import PokemonList from './PokemonList'\n// import BerryList from './BerryList'\n// import MachineList from './MachineList'\n\nexport default class Header extends Component {\n\n    render() {\n        return (\n            <header style={headerStyle}>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <h1 className=\"App-title\">Welcome to the Pokemon API</h1>\n                \n                <Link className='Header-link' to=\"/pokemon/page/0\" onClick={this.props.pokemonClick}>Pokemon</Link>|\n                <Link className='Header-link' to='/berries/page/0' onClick={this.props.berryClick}>Berry</Link>|\n                <Link className='Header-link' to='/machines/page/0'onClick={this.props.machinesClick}>Machine</Link>\n            </header>\n        )\n    }\n}\n\nconst headerStyle = {\n    background : '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px'\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect, Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pagination from 'react-bootstrap/Pagination'\n\nexport default class PokemonList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pokemonData: [],\n            prePage: null,\n            nextPage: null,\n            pageNum: null,\n            lastPageNum: null,\n            loading: false,\n            redirectPage: null\n        };\n    }\n\n    async getDatas(pageNum) {\n        this.setState({ loading: true });\n        try {\n            // let pageNum = Number.parseInt(this.props.match.params.page);\n            let res = await axios.get(`https://pokeapi.co/api/v2/pokemon/?offset=${pageNum * 20}&limit=20}`);\n            let prePage = res.data.previous;\n            let nextPage = res.data.next;\n            let numOfAllData = res.data.count;\n            let lastPageNum = Number.parseInt(numOfAllData / 20 + 1);\n            let data = res.data.results;\n\n            for (const i in data) {\n                if (data.hasOwnProperty(i)) {\n                    const onePokemon = data[i];\n                    let temp = onePokemon.url.split('/');\n                    let id = temp[6];\n                    data[i].id = id;\n                }\n            }\n            console.log(lastPageNum);\n            console.log(res);\n            this.setState({ pokemonData: data, prePage, nextPage, pageNum, lastPageNum , loading: false });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDatas(Number.parseInt(this.props.match.params.page));\n    }\n\n    pageChanged = (number) => {\n        this.getDatas(number);\n        this.setState({redirectPage: number});\n    }\n\n    renderRedirect = () => {\n        if(this.state.lastPageNum && this.state.lastPageNum <= Number.parseInt(this.props.match.params.page)){\n            return <Redirect to='/error' />\n        }\n        if (this.state.redirectPage) {\n            return <Redirect to={`/pokemon/page/${this.state.redirectPage}`} />\n        }\n    }\n\n    checkVaild = () => {\n        // console.log(this.props);\n        if(isNaN(this.props.match.params.page)){\n            return <Redirect to='/error' />\n        }\n    }\n\n    render() {\n        let body;\n\n        if (this.state.loading) {\n            body = (\n                <div>\n                    <h1 style={{ textAlign: 'center' }}>POKEMON</h1>\n                    <br />\n                    <p style={{ textAlign: 'center' }}>Loading...</p>\n                </div>\n            );\n        }\n        else {\n            let li = null;\n            li = this.state.pokemonData.map(onePokemon => {\n                return (\n                    <li key={onePokemon.id}>\n                        <Link to={`/pokemon/${onePokemon.id}`} style={{color: 'black'}} >{onePokemon.name}</Link>\n                    </li>\n                );\n            })\n\n            // pagination\n            let active = this.state.pageNum;\n            let items = [];\n            if (this.state.prePage)\n                items.push(<Pagination.Prev key={'prevButtion'} onClick={this.pageChanged.bind(this, active - 1)} />);\n\n            for (let i = 0; i < 5; i++) {\n                let number = this.state.pageNum + i;\n                items.push(\n                    <Pagination.Item key={number} active={number === active} onClick={this.pageChanged.bind(this, number)}>\n                        P{number + 1}\n                    </Pagination.Item>\n                );\n                if(number + 1 === this.state.lastPageNum)\n                    break;\n            }\n\n            if (this.state.nextPage)\n                items.push(<Pagination.Next key={'nextButtion'} onClick={this.pageChanged.bind(this, active + 1)} />);\n\n            body = (\n                <div>\n                    {this.checkVaild()}\n                    {this.renderRedirect()}\n                    <ul className=\"Pokemon-list\">{li}</ul>\n                    <div style={{textAlign: 'center', background: '#fff'}}>\n                        <Pagination style={{justifyContent: 'center'}}>{items}</Pagination>\n                    </div>\n                </div>\n            )\n        }\n        return body\n    }\n}\n","import React, { Component } from 'react'\nimport { Redirect } from \"react-router-dom\";\nimport axios from 'axios';\nimport noImage from \"./logo.png\";\n\nexport default class PokemonDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            onePokemonData: null,\n            loading: false,\n            errorRedirect: false\n        };\n    }\n    async getDatas() {\n        \n        try {\n            this.setState({ loading: true });\n            console.log(this.props);\n            let id = Number.parseInt(this.props.match.params.id);\n            let res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`);\n            this.setState({ onePokemonData: res.data, loading: false , errorRedirect: false});\n            console.log(this.state.onePokemonData);\n        } catch (e) {\n            this.setState({errorRedirect: true, loading: false});\n            console.log(e);\n        }\n        \n    }\n\n    componentDidMount() {\n        this.getDatas();\n    }\n\n    renderRedirect = () => {\n        if(this.state.errorRedirect){\n            return <Redirect to='/error' />\n        }\n    }\n\n    checkVaild = () => {\n        if(isNaN(this.props.match.params.id)){\n            return <Redirect to='/error' />\n        }\n    }\n\n    render() {\n        let body;\n        if (this.state.loading) {\n            body = (\n                <div>\n                    <h1 style={{ textAlign: 'center' }}>POKEMON</h1>\n                    <br />\n                    <p style={{ textAlign: 'center' }}>Loading...</p>\n                </div>\n            );\n        }\n        else {\n            \n            let name = this.state.onePokemonData && this.state.onePokemonData.name;\n            let img;\n            if (this.state.onePokemonData && this.state.onePokemonData.sprites.front_default)\n                img = <img alt={name} src={this.state.onePokemonData.sprites.front_default} />\n            else\n                img = <img alt=\"Pokemon\" src={noImage} width=\"60\" height=\"60\"/>\n            let abilities = this.state.onePokemonData && this.state.onePokemonData.abilities;\n            if(!abilities)\n                abilities = [];\n            let species = this.state.onePokemonData && this.state.onePokemonData.species;\n            if(!species)\n                species = \"\";\n            \n            body = (\n                <div style={{ textAlign: 'center' }}>\n                    {this.checkVaild()}\n                    {this.renderRedirect()}\n                    <br />\n                    <h2> {name} </h2>\n                    <br />\n                    {img}\n                    <br />\n                    <b>abilities</b>:\n                    <ul className=\"list-unstyled\">\n                        {abilities.map(ability => {\n                            return <li key={ability.ability.name}>{ability.ability.name}</li>;\n                        })}\n                    </ul>\n                    <br />\n                    <p>\n                        <b>species</b>:{species.name}\n                    </p>\n                </div>\n            )\n\n        }\n        return body;\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect, Link } from \"react-router-dom\";\n// import { LinkContainer } from 'react-router-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pagination from 'react-bootstrap/Pagination'\n\nexport default class BerryList extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            berryData: [],\n            prePage: null,\n            nextPage: null,\n            pageNum: null,\n            lastPageNum: null,\n            loading: false,\n            redirectPage: null,\n            navbarClicked: this.props.chick\n        };\n    }\n\n    async getDatas(pageNum) {\n        this.setState({ loading: true });\n        try {\n            // let pageNum = Number.parseInt(this.props.match.params.page);\n            let res = await axios.get(`https://pokeapi.co/api/v2/berry/?offset=${pageNum * 20}&limit=20}`);\n            let prePage = res.data.previous;\n            let nextPage = res.data.next;\n            let numOfAllData = res.data.count;\n            let lastPageNum = Number.parseInt(numOfAllData / 20 + 1);\n            let data = res.data.results;\n\n            for (const i in data) {\n                if (data.hasOwnProperty(i)) {\n                    const oneBerry = data[i];\n                    let temp = oneBerry.url.split('/');\n                    let id = temp[6];\n                    data[i].id = id;\n                }\n            }\n            console.log(lastPageNum);\n            console.log(res);\n            console.log(this.state)\n            this.setState({ berryData: data, prePage, nextPage, pageNum, lastPageNum , loading: false });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDatas(Number.parseInt(this.props.match.params.page));\n        // console.log(\"CLICKED\" + this.state.navbarClicked);\n    }\n\n    pageChanged = (number) => {\n        this.getDatas(number);\n        this.setState({redirectPage: number});\n    }\n\n    renderRedirect = () => {\n        console.log(this.state.lastPageNum, Number.parseInt(this.props.match.params.page));\n        if(this.state.lastPageNum && this.state.lastPageNum <= Number.parseInt(this.props.match.params.page)){\n            console.log(\"redirect\");\n            return <Redirect to='/error' />\n        }\n        if (this.state.redirectPage) {\n            return <Redirect to={`/berries/page/${this.state.redirectPage}`} />\n        }\n    }\n\n    checkVaild = () => {\n        console.log(this.props);\n        if(isNaN(this.props.match.params.page)){\n            return <Redirect to='/error' />\n        }\n    }\n\n    render() {\n        let body;\n\n        if (this.state.loading) {\n            body = (\n                <div>\n                    <h1 style={{ textAlign: 'center' }}>BERRY</h1>\n                    <br />\n                    <p style={{ textAlign: 'center' }}>Loading...</p>\n                </div>\n            );\n        }\n        else {\n            let li = null;\n            li = this.state.berryData.map(oneBerry => {\n                // console.log(oneBerry.id);\n                return (\n                    <li key={oneBerry.id}>\n                        <Link to={`/berries/${oneBerry.id}`} style={{color: 'black'}} >{oneBerry.name}</Link>\n                    </li>\n                );\n            })\n\n            // pagination\n            let active = this.state.pageNum;\n            let items = [];\n            if (this.state.prePage){\n                items.push(\n                    // <LinkContainer to={`/berries/page/${active - 1}`}>\n                        <Pagination.Prev key={'prevButtion'} onClick={this.pageChanged.bind(this, active - 1)} />\n                    // </LinkContainer>\n                );\n            }\n\n            for (let i = 0; i < 5; i++) {\n                let number = this.state.pageNum + i;\n                items.push(\n                    // <LinkContainer to={`/berries/page/${number}`}>\n                        <Pagination.Item key={number} alt={`this is page ${number}`} active={number === active} onClick={this.pageChanged.bind(this, number)} >\n                            P{number + 1}\n                        </Pagination.Item>\n                    // </LinkContainer>\n                    \n                );\n                if(number + 1 === this.state.lastPageNum)\n                    break;\n            }\n\n            if (this.state.nextPage){\n                items.push(\n                    // <LinkContainer to={`/berries/page/${active + 1}`}>\n                        <Pagination.Next key={'nextButtion'} onClick={this.pageChanged.bind(this, active + 1)} />\n                    // </LinkContainer>\n                );\n            }\n\n            body = (\n                <div>\n                    {this.checkVaild()}\n                    {this.renderRedirect()}\n                    <ul className=\"berry-list\">{li}</ul>\n                    <div style={{textAlign: 'center', background: '#fff'}}>\n                        <Pagination style={{justifyContent: 'center'}}>{items}</Pagination>\n                    </div>\n                </div>\n            )\n        }\n        return body\n    }\n}\n\n","import React, { Component } from 'react'\nimport { Redirect } from \"react-router-dom\";\nimport axios from 'axios';\n\nexport default class BerryDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oneBerryData: null,\n            loading: false,\n            errorRedirect: false\n        };\n    }\n\n    async getDatas() {\n        try {\n            this.setState({ loading: true });\n            console.log(this.props);\n            let id = Number.parseInt(this.props.match.params.id);\n            let res = await axios.get(`https://pokeapi.co/api/v2/berry/${id}`);\n            this.setState({ oneBerryData: res.data, loading: false, errorRedirect: false });\n            console.log(this.state.oneBerryData);\n        } catch (e) {\n            console.log(\"error!!\");\n            this.setState({ errorRedirect: true, loading: false });\n            console.log(e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDatas();\n    }\n\n    renderRedirect = () => {\n        if (this.state.errorRedirect) {\n            return <Redirect to='/error' />\n        }\n    }\n\n    checkVaild = () => {\n        if(isNaN(this.props.match.params.id)){\n            return <Redirect to='/error' />\n        }\n    }\n\n    render() {\n        let body;\n        if (this.state.loading) {\n            body = (\n                <div>\n                    <h1 style={{ textAlign: 'center' }}>BERRY</h1>\n                    <br />\n                    <p style={{ textAlign: 'center' }}>Loading...</p>\n                </div>\n            );\n        }\n        else {\n            let name = this.state.oneBerryData && this.state.oneBerryData.name;\n            let firmness = this.state.oneBerryData && this.state.oneBerryData.firmness;\n            if (!firmness)\n                firmness = {};\n            let flavors = this.state.oneBerryData && this.state.oneBerryData.flavors;\n            if (!flavors)\n                flavors = [];\n            let max_harvest = this.state.oneBerryData && this.state.oneBerryData.max_harvest;\n            let size = this.state.oneBerryData && this.state.oneBerryData.size;\n            let smoothness = this.state.oneBerryData && this.state.oneBerryData.smoothness;\n            body = (\n                <div style={{ textAlign: 'center' }}>\n                    {this.checkVaild()}\n                    {this.renderRedirect()}\n                    <br />\n                    <h2> {name} </h2>\n                    <p>\n                        <b>firmness</b>: {firmness.name}\n                        <br />\n                        <b>max_harvest</b>: {max_harvest}\n                        <br />\n                        <b>size</b>: {size}\n                        <br />\n                        <b>smoothness</b>: {smoothness}\n                    </p>\n                    <b>flavors</b>:\n                    <ul className=\"list-unstyled\">\n                        {flavors.map(flavor => {\n                            return <li key={flavor.flavor.name}>{flavor.flavor.name}</li>;\n                        })}\n                    </ul>\n                </div>\n            );\n        }\n        return body;\n    }\n}\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect, Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pagination from 'react-bootstrap/Pagination'\n\nexport default class MachineList extends Component {\n     constructor(props) {\n        super(props);\n        this.state = {\n            machineData: [],\n            prePage: null,\n            nextPage: null,\n            pageNum: null,\n            lastPageNum: null,\n            loading: false,\n            redirectPage: null\n        };\n    }\n\n    async getDatas(pageNum) {\n        this.setState({ loading: true });\n        try {\n            // let pageNum = Number.parseInt(this.props.match.params.page);\n            let res = await axios.get(`https://pokeapi.co/api/v2/machine/?offset=${pageNum * 20}&limit=20}`);\n            let prePage = res.data.previous;\n            let nextPage = res.data.next;\n            let numOfAllData = res.data.count;\n            let lastPageNum = Number.parseInt(numOfAllData / 20 + 1);\n            let data = res.data.results;\n\n            for (const i in data) {\n                if (data.hasOwnProperty(i)) {\n                    const oneMachine = data[i];\n                    let temp = oneMachine.url.split('/');\n                    let id = temp[6];\n                    data[i].id = id;\n                }\n            }\n            console.log(lastPageNum);\n            console.log(res);\n            console.log(this.state)\n            this.setState({ machineData: data, prePage, nextPage, pageNum, lastPageNum , loading: false });\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDatas(Number.parseInt(this.props.match.params.page));\n    }\n\n    pageChanged = (number) => {\n        this.getDatas(number);\n        this.setState({redirectPage: number});\n    }\n\n    renderRedirect = () => {\n        console.log(this.state.lastPageNum, Number.parseInt(this.props.match.params.page));\n        if(this.state.lastPageNum && this.state.lastPageNum <= Number.parseInt(this.props.match.params.page)){\n            console.log(\"redirect\");\n            return <Redirect to='/error' />\n        }\n        if (this.state.redirectPage) {\n            return <Redirect to={`/machines/page/${this.state.redirectPage}`} />\n        }\n    }\n    \n    checkVaild = () => {\n        if(isNaN(this.props.match.params.page)){\n            return <Redirect to='/error' />\n        }\n    }\n\n    render() {\n        let body;\n\n        if (this.state.loading) {\n            body = (\n                <div>\n                    <h1 style={{ textAlign: 'center' }}>MACHINE</h1>\n                    <br />\n                    <p style={{ textAlign: 'center' }}>Loading...</p>\n                </div>\n            );\n        }\n        else {\n            let li = null;\n            li = this.state.machineData.map(oneMachine => {\n                return (\n                    <li key={oneMachine.id}>\n                        <Link to={`/machines/${oneMachine.id}`} style={{color: 'black'}} >ID: {oneMachine.id}</Link>\n                    </li>\n                );\n            })\n\n            // pagination\n            let active = this.state.pageNum;\n            let items = [];\n            if (this.state.prePage)\n                items.push(<Pagination.Prev key={'prevButtion'} onClick={this.pageChanged.bind(this, active - 1)} />);\n\n            for (let i = 0; i < 5; i++) {\n                let number = this.state.pageNum + i;\n                items.push(\n                    <Pagination.Item key={number} active={number === active} onClick={this.pageChanged.bind(this, number)}>\n                        P{number + 1}\n                    </Pagination.Item>\n                );\n                if(number + 1 === this.state.lastPageNum)\n                    break;\n            }\n\n            if (this.state.nextPage)\n                items.push(<Pagination.Next key={'nextButtion'} onClick={this.pageChanged.bind(this, active + 1)} />);\n\n            body = (\n                <div>\n                    {this.checkVaild()}\n                    {this.renderRedirect()}\n                    <ul className=\"machine-list\">{li}</ul>\n                    <div style={{textAlign: 'center', background: '#fff'}}>\n                        <Pagination style={{justifyContent: 'center'}}>{items}</Pagination>\n                    </div>\n                </div>\n            )\n        }\n        return body\n    }\n}","import React, { Component } from 'react'\nimport { Redirect } from \"react-router-dom\";\nimport axios from 'axios';\n\nexport default class MachineDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oneMachineData: null,\n            loading: false,\n            errorRedirect: false\n        };\n    }\n\n    async getDatas() {\n        try {\n            this.setState({ loading: true });\n            console.log(this.props);\n            let id = Number.parseInt(this.props.match.params.id);\n            let res = await axios.get(`https://pokeapi.co/api/v2/machine/${id}`);\n            this.setState({ oneMachineData: res.data, loading: false, errorRedirect: false });\n            console.log(this.state.oneMachineData);\n        } catch (e) {\n            this.setState({ errorRedirect: true, loading: false });\n            console.log(e);\n        }\n    }\n\n    componentDidMount() {\n        this.getDatas();\n    }\n\n    renderRedirect = () => {\n        if (this.state.errorRedirect) {\n            return <Redirect to='/error' />\n        }\n    }\n\n    checkVaild = () => {\n        if(isNaN(this.props.match.params.id)){\n            return <Redirect to='/error' />\n        }\n    }\n\n    render() {\n        let body;\n        if (this.state.loading) {\n            body = (\n                <div>\n                    <h1 style={{ textAlign: 'center' }}>MACHINE</h1>\n                    <br />\n                    <p style={{ textAlign: 'center' }}>Loading...</p>\n                </div>\n            );\n        }\n        else {\n            let id = this.state.oneMachineData && this.state.oneMachineData.id;\n            let item = this.state.oneMachineData && this.state.oneMachineData.item;\n            if (!item)\n            item = {};\n            let move = this.state.oneMachineData && this.state.oneMachineData.move;\n            if (!move)\n            move = {};\n            let version_group = this.state.oneMachineData && this.state.oneMachineData.version_group;\n            if (!version_group)\n            version_group = {};\n            body = (\n                <div style={{ textAlign: 'center' }}>\n                    {this.checkVaild()}\n                    {this.renderRedirect()}\n                    <br />\n                    <h2> {id} </h2>\n                    <br />\n                    <b>item</b>: {item.name}\n                    <br />\n                    <b>move</b>: {move.name}\n                    <br />\n                    <b>version_group</b>: {version_group.name}\n                </div>\n            );\n        }\n        return body;\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class ErrorPage extends Component {\n    render() {\n        console.log(\"error\");\n        return (\n            <div style={errorStyle}>\n                <h2>404</h2>\n            </div>\n        )\n    }\n}\n\nconst errorStyle = {\n    textAlign: 'center',\n    fontSize: 'large'\n}","import React, { Component } from 'react';\nimport './App.css'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from './components/Header';\n// import ContactContainer from './components/ContactContainer';\nimport PokemonList from './components/PokemonList'\nimport PokemonDetail from './components/PokemonDetail'\nimport BerryList from './components/BerryList'\nimport BerryDetail from './components/BerryDetail'\nimport MachineList from './components/MachineList'\nimport MachineDetail from './components/MachineDetail'\nimport ErrorPage from './components/ErrorPage'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pokemonClick: false,\n            berryClick: false,\n            machinesClick: false\n        }\n    }\n\n    pokemonClickSwitch = () => {\n        this.setState({ pokemonClick: !this.state.pokemonClick });\n        console.log(this.state.pokemonClick);\n    }\n    berryClickSwitch = () => {\n        this.setState({ berryClick: !this.state.berryClick });\n        console.log(this.state.berryClick);\n    }\n    machineClickSwitch = () => {\n        this.setState({ machinesClick: !this.state.machinesClick });\n        console.log(this.state.machinesClick);\n    }\n\n    render() {\n        return (\n            <Router>\n                <Header pokemonClick={this.pokemonClickSwitch} berryClick={this.berryClickSwitch} machinesClick={this.machineClickSwitch} />\n\n                <Switch>\n                    <Route exact path='/dommePokimonAPI' render={props => (\n                        <div className='welcome-page'>\n                            <h1>WELCOME PAGE</h1>\n                            <p>Pokémon also known as Pocket Monsters in Japan, is a media franchise managed by The Pokémon Company, <br />\n                                a Japanese consortium between Nintendo, Game Freak, and Creatures. The franchise copyright is shared <br />\n                                by all three companies, but Nintendo is the sole owner of the trademark. The franchise was created by <br />\n                                Satoshi Tajiri in 1995, and is centered on fictional creatures called \"Pokémon\", which humans, known <br />\n                                as Pokémon Trainers, catch and train to battle each other for sport. The English slogan for the franchise <br />\n                                is \"Gotta Catch 'Em All\". Works within the franchise are set in the Pokémon universe.</p>\n                            <h2>Router</h2>\n                            <ul className=\"list-unstyled\">\n                                <li key=\"1\">\n                                    /pokemon/page/:page\n                                </li>\n                                <li key=\"2\">\n                                    /pokemon/:id\n                                </li>\n                                <li key=\"3\">\n                                    /berries/page/:page\n                                </li>\n                                <li key=\"4\">\n                                    /berries/:id\n                                </li>\n                                <li key=\"5\">\n                                    /machines/page/:page\n                                </li>\n                                <li key=\"6\">\n                                    /machines/page/:page\n                                </li>\n                            </ul>\n                        </div>\n                    )} />\n\n                    {/* <Route exact path=\"/pokemon/page/:page\" render={props => (\n                        <React.Fragment>\n                            <PokemonList click={this.state.pokemonClick} />\n                        </React.Fragment>\n                    )} /> */}\n                    {/* <Route exact path='/berries/page/:page' render={props => (\n                        <React.Fragment>\n                            <BerryList click={this.state.berryClick} />\n                        </React.Fragment>\n                    )}/> */}\n                    {/* <Route exact path='/machines/page/:page' render={props => (\n                        <React.Fragment>\n                            <MachineList click={this.state.machinesClick} />\n                        </React.Fragment>\n                    )}/> */}\n\n                    <Route exact path=\"/dommePokimonAPI/pokemon/page/:page\" component={PokemonList} />\n                    <Route exact path='/dommePokimonAPI/berries/page/:page' component={BerryList} />\n                    <Route exact path='/dommePokimonAPI/machines/page/:page' component={MachineList} />\n                    <Route exact path=\"/dommePokimonAPI/pokemon/:id\" component={PokemonDetail} />\n                    <Route exact path='/dommePokimonAPI/berries/:id' component={BerryDetail} />\n                    <Route exact path='/dommePokimonAPI/machines/:id' component={MachineDetail} />\n                    <Route exact path='/dommePokimonAPI/error' component={ErrorPage} />\n                    <Redirect from='/dommePokimonAPI/*' to='/error' />\n                </Switch>\n\n            </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}